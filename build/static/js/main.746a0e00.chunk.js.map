{"version":3,"sources":["components/Video.js","components/Lyrics.js","fonts/PFStardust.ttf","components/Searchbar.js","components/Section.js","App.js","reportWebVitals.js","index.js"],"names":["Video","videoId","queryurl","className","url","width","height","playing","Lyrics","artist","songTitle","useState","songLyrics","setSongLyrics","useEffect","a","solenolyrics","require","requestLyricsFor","lyrics","undefined","searchLyrics","Searchbar","keyword","setKeyword","setArtist","setsongTitle","setVideoID","fetch","response","json","result","items","id","search","onSubmit","e","preventDefault","split","placeholder","type","value","onChange","target","Section","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAqBeA,EAjBD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAENC,EAAQ,sCAAkCD,GAEhD,OACI,8BACI,cAAC,IAAD,CAAaE,UAAY,QACrBC,IAAMF,EACNG,MAAQ,OACRC,OAAS,OACTC,QAAU,YCoCXC,GClDA,IDKA,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,UAGrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KA2BA,OAzBAC,qBAAU,YAGQ,uCAAG,8BAAAC,EAAA,6DAEXC,EAAcC,EAAQ,IAFX,SAGID,EAAaE,iBAAiBR,EAAYD,GAH9C,OAGXU,EAHW,OAObN,OADWO,IAAXD,EACc,aAECA,GATF,2CAAH,qDAedE,KACD,CAACZ,EAAQC,IAOR,sBAAKP,UAAY,SAAjB,UACI,mCAAMO,EAAN,OACA,qBAAIP,UAAY,aAAhB,cAA+BM,KAC/B,oBAAIN,UAAY,eAAhB,SACKS,IAGL,8BACI,oBAAIT,UAAY,eAAhB,iCEgDDmB,EAtFG,WAId,MAA8BX,mBAAS,IAAvC,mBAAOY,EAAP,KAAgBC,EAAhB,KACA,EAA4Bb,mBAAS,SAArC,mBAAOF,EAAP,KAAegB,EAAf,KACA,EAAkCd,mBAAS,WAA3C,mBAAOD,EAAP,KAAkBgB,EAAlB,KACA,EAA8Bf,mBAAS,IAAvC,mBAAOV,EAAP,KAAgB0B,EAAhB,KAKAb,qBAAU,YAGE,uCAAG,gCAAAC,EAAA,6DAELX,EAFK,0EACGK,EAAS,MAAOC,EADnB,qBAGYkB,MAAMxB,EAAK,CACrC,OAAU,MACV,QAAW,CACd,iBAAkB,qDAClB,kBAAmB,2CAPF,cAGLyB,EAHK,gBAYUA,EAASC,OAZnB,OAYLC,EAZK,OAeXJ,EAAWI,EAAOC,MAAM,GAAGC,IAfhB,2CAAH,qDAkBZC,KACG,CAACzB,EAAQC,IAwBZ,OACI,gCAEI,4BACI,8BACI,uBAAMyB,SArBH,SAACC,GAChBA,EAAEC,iBAGF,IACMC,EADQf,EACMe,MAAM,KAE1Bb,EAAUa,EAAM,IAChBZ,EAAaY,EAAM,IAEnBd,EAAW,KAWC,UACI,uBAAQe,YAAY,mBAAmBC,KAAK,OAAOC,MAASlB,EAASmB,SA1BpE,SAACN,GAClBZ,EAAWY,EAAEO,OAAOF,UA0BJ,wBAAQtC,UAAY,YAAYqC,KAAO,SAAvC,6BAIZ,4BACI,4BACI,qBAAKrC,UAAY,YAAjB,SACI,cAAC,EAAD,CAAOF,QAAWA,UAM9B,8BACI,cAAC,EAAD,CAAQQ,OAAUA,EAAQC,UAAaA,UCjExCkC,EAfC,WAEZ,OACI,qBAAKzC,UAAY,UAAjB,SACI,8BAEI,cAAC,EAAD,CAAWA,UAAY,mBCSxB0C,EAbH,WAGV,OACE,qBAAK1C,UAAU,MAAf,SACE,4BACE,cAAC,EAAD,SCDO2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.746a0e00.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactPlayer from \"react-player\"\r\n\r\n\r\nconst Video = ({videoId}) => {\r\n\r\n    const queryurl = `https://youtube.com/watch?v=${videoId}`;\r\n\r\n    return (\r\n        <div>\r\n            <ReactPlayer className = \"video\"\r\n                url= {queryurl}\r\n                width = '50vh'\r\n                height = '30vh'\r\n                playing = 'true'\r\n            />\r\n        </div>\r\n    );\r\n\r\n}; \r\n\r\nexport default Video;","import React, {useState, useEffect} from 'react';\r\nimport '../fonts/PFStardust.ttf';\r\n\r\n\r\n// component: lyrics\r\nconst Lyrics = ({artist, songTitle}) => {\r\n    \r\n    // state that stores the lyrics\r\n    const [songLyrics, setSongLyrics] = useState([]); // lyrics\r\n    // runs in sideways every time the page re-renders\r\n    useEffect(() => {\r\n        \r\n    // methods that retrieves the lyrics \r\n    const searchLyrics = async () => {\r\n\r\n        const solenolyrics= require(\"solenolyrics\"); \r\n        const lyrics = await solenolyrics.requestLyricsFor(songTitle + artist); \r\n        // console.log(lyrics);\r\n\r\n        if (lyrics === undefined) {\r\n            setSongLyrics(\"Not Found!\");\r\n        } else {\r\n             setSongLyrics(lyrics);\r\n\r\n        }\r\n\r\n    }; // searchlyrics\r\n\r\n        searchLyrics();\r\n    }, [artist, songTitle]);\r\n    \r\n\r\n\r\n\r\n    // return scene\r\n    return (\r\n        <div className = \"lyrics\">\r\n            <h3> {songTitle} </h3>     \r\n            <h4 className = \"artistName\"> {artist}</h4>       \r\n            <h5 className = \"lyricContent\" >\r\n                {songLyrics}\r\n            </h5>\r\n\r\n            <div>\r\n                <h5 className = \"lyricContent\"> Made by YR </h5>\r\n            </div>\r\n        </div>\r\n    );\r\n}; // lyrics\r\n\r\nexport default Lyrics;\r\n","export default __webpack_public_path__ + \"static/media/PFStardust.1477fa74.ttf\";","import React, {useState, useEffect} from 'react';\r\nimport Video from './Video';\r\nimport Lyrics from './Lyrics';\r\n\r\n\r\n// component: searchBar\r\nconst Searchbar = () => {\r\n\r\n    // some default values\r\n    // stores the search keyword: default being an empty string \r\n    const [keyword, setKeyword] = useState(\"\"); // keyword from the search bar\r\n    const [artist, setArtist] = useState(\"ateez\"); // stores artist name\r\n    const [songTitle, setsongTitle] = useState(\"Promise\"); // the finalized keyword\r\n    const [videoId, setVideoID] = useState(\"\");\r\n    \r\n\r\n     // functions\r\n  // runs in sideways every time the page re-renders\r\n    useEffect(() => {\r\n         \r\n    // function that searches using keyword and retrives the video id \r\n    const search = async () => {\r\n        const query = artist + \"%20\"+ songTitle;\r\n        const url = `https://youtube-search-results.p.rapidapi.com/youtube-search/?q=${query}%20audio`;\r\n        const response = await fetch(url, {\r\n\t    \"method\": \"GET\",\r\n\t    \"headers\": {\r\n\t\t\"x-rapidapi-key\": \"bb4a717ab6msh81eee85b2ac3b3ap18a45djsn9207984d4865\",\r\n\t\t\"x-rapidapi-host\": \"youtube-search-results.p.rapidapi.com\"\r\n\t    }\r\n        });\r\n\r\n\r\n        const result = await response.json(); // convert to json\r\n        \r\n        // console.log(result);\r\n        setVideoID(result.items[0].id); // set video id\r\n    }; // search\r\n\r\n    search();\r\n    }, [artist, songTitle]);\r\n\r\n\r\n    // functions\r\n    const updateSearch = (e) => {\r\n        setKeyword(e.target.value); // get the keyword and save it into keyword\r\n    }; \r\n\r\n    const getKeyword = (e) => {\r\n        e.preventDefault();\r\n\r\n        // temp variables\r\n        const query = keyword; // store up the entire search query that was put in the searchbar\r\n        const split = query.split('-'); // split the string into artist and song title \r\n\r\n        setArtist(split[0]); // the artist name\r\n        setsongTitle(split[1]); // the song title\r\n\r\n        setKeyword(\"\"); // clear the search bar\r\n    };\r\n\r\n\r\n\r\n    // scene builder\r\n    return (\r\n        <div>\r\n              \r\n            <p>\r\n                <div>\r\n                    <form onSubmit = {getKeyword}>\r\n                        <input  placeholder=\"artist-songTitle\" type=\"text\" value = {keyword} onChange = {updateSearch}/>\r\n                        <button className = \"searchBtn\" type = \"submit\" > Search </button>\r\n                    </form>\r\n                </div>\r\n            </p>\r\n            <p>\r\n                <p>\r\n                    <div className = \"videoArea\">\r\n                        <Video videoId = {videoId} />\r\n                    </div> \r\n                </p>\r\n            </p>\r\n            \r\n                \r\n            <div>\r\n                <Lyrics artist = {artist} songTitle = {songTitle} />\r\n            </div>\r\n        </div>\r\n    );\r\n}; \r\n\r\n\r\nexport default Searchbar;","import React from 'react';\r\nimport Searchbar from './Searchbar';\r\n\r\n\r\n\r\nconst Section = () => {\r\n \r\n    return (\r\n        <div className = \"Section\">\r\n            <div>\r\n                \r\n                <Searchbar className = \"searchbar\" />\r\n                \r\n            </div>\r\n      \r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default Section;\r\n","import './App.css';\nimport React from 'react';\nimport Section from './components/Section'\n\n\n\n\nconst App = () => {\n \n\n  return (\n    <div className=\"App\">\n      <p>\n        <Section />\n      </p>\n       \n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}